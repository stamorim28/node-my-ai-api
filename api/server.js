import express from "express";
import multer from "multer";
import cors from "cors";
import OpenAI from "openai";
import "dotenv/config";

const app = express();
const upload = multer();
app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

app.post("/api/voice-task", upload.single("audio"), async (req, res) => {
  try {
    if (!req.file)
      return res.status(400).json({ error: "Nenhum √°udio recebido." });

    console.log("üéß Recebendo √°udio, iniciando transcri√ß√£o...");

    console.log("üóÇÔ∏è Tipo:", req.file.mimetype);
    console.log("üìè Tamanho:", req.file.size, "bytes");
    const audioFile = new File([req.file.buffer], "voice.webm", {
      type: "audio/webm",
    });

    const transcription = await openai.audio.transcriptions.create({
      file: audioFile,
      model: "whisper-1",
    });

    const text = transcription.text?.trim();
    if (!text) throw new Error("Transcri√ß√£o vazia");
    console.log("üìù Transcri√ß√£o:", text);

    const prompt = `
Voc√™ √© um assistente que transforma instru√ß√µes verbais em tarefas estruturadas prontas para uso em interfaces web.

Gere exatamente um objeto JSON v√°lido com esta estrutura:
{
  "title": "<h2>T√≠tulo curto da tarefa</h2>",
  "description": "<div>Descri√ß√£o detalhada com formata√ß√£o HTML; use tags como <p>, <ul>, <li>, <strong>, <em>, <br> quando apropriado</div>",
  "priority": "low" | "medium" | "high"
}

Regras de extra√ß√£o e formata√ß√£o
- **T√≠tulo**: curta express√£o resumindo a a√ß√£o; envolva com uma tag de t√≠tulo HTML apropriada como &lt;h2&gt; ou &lt;h3&gt;; m√°ximo 8 palavras.
- **Descri√ß√£o**: par√°grafo inicial conciso seguido de lista com passos ou crit√©rios quando fizer sentido; mantenha HTML limpo e sem atributos inline.
- **Prioridade**: escolha entre low, medium ou high baseado em urg√™ncia e impacto expl√≠citos ou impl√≠citos no texto falado.
- **Sa√≠da**: retorne apenas o JSON, sem texto adicional, sem explica√ß√µes e sem quebras de linha dentro dos valores al√©m das necess√°rias para HTML v√°lido.
- **Seguran√ßa**: remova informa√ß√µes sens√≠veis encontradas no texto; substitua por "[removido]" quando necess√°rio.

Exemplos de sa√≠da esperada
- Entrada falada: "Arrumar a reuni√£o com o cliente amanh√£ e enviar a proposta at√© ter√ßa"
- JSON gerado:
{
  "title": "<h2>Agendar reuni√£o com cliente</h2>",
  "description": "<p>Marcar data e enviar proposta.</p><ul><li>Confirmar disponibilidade do cliente</li><li>Preparar proposta com pre√ßos</li><li>Enviar por e-mail e pedir confirma√ß√£o</li></ul>",
  "priority": "high"
}

Texto falado pelo usu√°rio:
"""${text}"""
`;

    const completion = await openai.chat.completions.create({
      model: "gpt-5-nano",
      messages: [{ role: "user", content: prompt }],
      // temperature: 0.5,
    });

    const resultText = completion.choices[0].message.content;
    const jsonMatch = resultText.match(/\{[\s\S]*\}/);

    const task = jsonMatch
      ? JSON.parse(jsonMatch[0])
      : {
          title: "Tarefa n√£o identificada",
          description: text,
          priority: "medium",
        };

    console.log("‚úÖ Tarefa gerada:", task);

    res.json({
      transcript: text,
      task,
    });
  } catch (err) {
    console.error("‚ùå Erro no processamento de √°udio:", err);
    res
      .status(500)
      .json({ error: "Erro ao processar o √°udio e gerar a tarefa." });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () =>
  console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`)
);
